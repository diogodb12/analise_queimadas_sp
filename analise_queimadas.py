# -*- coding: utf-8 -*-
"""pcg_dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n0gAMhhxQE39GubNtKD_7isDIR2T0qYT

Análise de queimadas em relação aos dias sem chuva no estado de São Paulo em 2024
"""

#importação do arquivo csv do drive que possuia o arquivo, alterado para ficar posível rodar sem o colab, mas ainda tive problemas
#from google.colab import drive
#drive.mount('/content/drive')

#Define o arquivo, puxando da pasta
arquivo = 'focos_br_todos-sats_2024.csv'

import pandas as pd

#Leitura do dataset
df = pd.read_csv(arquivo)

#Remove o limite de linhas padrão do Pandas
pd.set_option('display.max_rows', None)

#Identifica o nome exato das colunas
df['estado'].unique()

#Remove valores nulos
df.dropna(inplace = True)

#Filtra apenas municípios do estado de São Paulo
df_sp = df[df['estado'] == 'SÃO PAULO'].drop(columns=['id_area_industrial','satelite', 'latitude', 'longitude'])
df_sp.head()

#Identifica os Biomas existentes em SP
df_sp.bioma.unique()

import pandas as pd

#Remove linhas zeradas e também exclui as colunas de estado e país, sabemos que é o estado de SP
df_sp_limpo = df_sp[((df_sp['numero_dias_sem_chuva'] > 0) & (df_sp['risco_fogo'] > 0) )].drop(columns=['estado','pais'])

# Converte a coluna "data_pas" de string para data
df_sp_limpo['data_pas'] = pd.to_datetime(df_sp_limpo['data_pas'])

# Filtrar o mês da coluna 'data_pas'
df_sp_limpo['month'] = df_sp_limpo['data_pas'].dt.month
df_sp_limpo

# Agrupar cada MUNICIPIO por MÊS, tira a MÉDIA de cada valor do que vai ser analizado ['numero_dias_sem_chuva', 'precipitacao', 'risco_fogo']
df_sp_limpo = df_sp_limpo.groupby(['bioma', 'month'])[['numero_dias_sem_chuva', 'precipitacao', 'risco_fogo']].mean()
df_sp_limpo

#redefine o índice do dataset. Após a filtragem o índice pode não estar mais em sequência.
df_sp_limpo = df_sp_limpo.reset_index()

#Confirma se está tudo ok
biomas = df_sp_limpo['bioma'].unique()
colunas_numericas = ['numero_dias_sem_chuva', 'precipitacao', 'risco_fogo']
print(biomas)

import plotly.express as px

bioma1 = 'Cerrado'
bioma2 = 'Mata Atlântica'

# Filtra data por bioma
df_itapeva = df_sp_limpo[df_sp_limpo['bioma'] == bioma1]
df_mata_atlantica = df_sp_limpo[df_sp_limpo['bioma'] == bioma2]

#Cria um gráfico dos biomas, ainda não normalizado, baixa legibilidade da relação
fig1 = px.line(df_itapeva, x='month', y=colunas_numericas,
              title=f'{bioma1} - Número de Dias Sem Chuva, Precipitação e Risco de Fogo ao Longo do Tempo')
fig2 = px.line(df_mata_atlantica, x='month', y=colunas_numericas,
              title=f'{bioma2} - Número de Dias Sem Chuva, Precipitação e Risco de Fogo ao Longo do Tempo')
fig1.show()
fig2.show()

#Define apenas as colunas de interesse
dados_numeros = df_sp_limpo[colunas_numericas]
df_sp_limpo_norm = df_sp_limpo.copy()

#Normalização dos dados, escala de 0 a 1, melhor legibilidade do gráfico de relação
df_sp_limpo_norm[colunas_numericas] = (dados_numeros - dados_numeros.min()) / (dados_numeros.max() - dados_numeros.min())
df_sp_limpo_norm

from IPython.display import display
pd.options.plotting.backend = "plotly"

import plotly.express as px

#Gráfico com os valores normalizados, já formatado
for bioma in biomas:
    df_filtrado = df_sp_limpo_norm[df_sp_limpo_norm['bioma'] == bioma]

    fig = px.line(
        df_filtrado,
        x='month',
        y=colunas_numericas,
        title=f'{bioma} - Análise do risco de fogo em relação aos dias sem chuva em 2024',
        labels={
            'month': 'Meses',
            'value': 'Valores Normalizados',
            'variable': 'Indicador'
        },
        #Cores intuitivas
        color_discrete_sequence=['#F4A261', '#457B9D', '#E63946']
    )
    #Define o eixo X indo de 1 a 12 em cada gráfico, representando os meses
    fig.update_xaxes(dtick=1, range=[1, 12])
    fig.show()